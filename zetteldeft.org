#+title: Zetteldeft
#+author: EFLS
#+date: July 2018
:headers:
# By default, each block of code should tangle & evaluate silently
#+PROPERTY: header-args:emacs-lisp :results silent :tangle zetteldeft.el
:end:
:statuses:
# Different statuses
#+TODO: FIX(f) NEW(n) DEV(o) | DONE(d)
# FIX: Fix needed
# NEW: New feature, awaiting implementation
# DEV: In development
:end:
:export:
#+OPTIONS: date:nil toc:nil H:4
#+EXPORT_FILE_NAME: ./docs/index
# CSS
#+HTML_HEAD: <link rel='stylesheet' href='style.css' type='text/css'/>
# PDF
#+LATEX_HEADER: \usepackage[]{efls-doc}
:end:

* Introduction                                 :ignore:

This document contains all the source code to a set of functions for =emacs= which aim to extend the =deft= package and turn it into a (very very) basic Zettelkasten note-taking system.

Check out the github [[https://github.com/EFLS/zetteldeft][repository]] to get the source.
Read on for an introduction and some documentation.

Latest additions:
 - *24 Sep*: Count the total number of words in your zetteldeft with =zd-count-words=.
 - *25 Aug*: Renaming a file with =zd-file-rename= now also updates filename within the org-file. Also altered =zd-after-title=.
 - *18 July*: Include a list of links with =zd-insert-list-links=, or a list of files with =zd-org-include-search=.
 - *17 July*: Insert note title with =zd-insert-org-title=.
 - *16 July*: Highlight zetteldeft links in =org-mode=.


# Table of Contents
#+TOC: headlines 2

* What?
** A Zettelkasten system for =emacs= based on =deft=

This is my feeble attempt at recreating a Zettelkasten environment by extending the excellent =deft= package in =emacs=.[fn:deft]
I call it *zetteldeft*.
It is inspired by the /The Archive/ app. For this and more on the Zettelkasten way of taking notes, see [[https://zettelkasten.de][zettelkasten.de]]. They have a forum for discussion on both software and the specifics of the Zettelkasten philosophy.

The code that follows is created and maintained for my personal use, shared here in hope that it can benefit others as well.
I'd be happy to learn how you use it and expand upon it.

It is very much WIP and I'm fairly new to =elisp=, so it might contain some stupid code.

Anyway, here we go.

[fn:deft] For those not yet familiar: *deft* is a note manager within =emacs=, for easily searching and retrieving plain text notes.
It is inspired by the popular Notational Velocity.
Check out [[https://jblevins.org/projects/deft/][jblevins.org/projects/deft/]] and [[http://notational.net][notational.net]].

** Basic concepts

*Notes* reside in the =deft-directory=.
Notes are written in =org-mode= (although this can be changed easily).

The filename of a note starts with a unique *id* based on the time and the date, for example: =2018-07-09-2115 This is a note.org=.

This unique id can be used to *link* notes together.
A link is indicated by a =§= character, followed by the id.
For example: =§2018-07-08-2115= should link to the file above.
A link can appear anywhere in the text.

When searching =deft= with the *id* as a filter, you'll find both the original note (with the id in its name) and all the notes that link to this note (with the id in its body). Do so with =zd-search-current-id= and =zd-avy-link-search= respectively

Notes can contain *tags*, prepended with a =#=.
This is a tag: =#tag=.
Tags make it easy to retrieve notes. They can appear anywhere in the note, but I'd suggest putting them somewhere at the top.

Call up a =deft= search on both tags and links with =zd-search-at-point=.
To jump to a tag or link and search it, use =zd-avy-tag-search= and =zd-avy-link-search= respectively.
To open a note from a link, use =zd-avy-file-search=.

** Basic functions

Some functions to get started.
I created more, but these should be enough to get you started.
Default keybindings are set at the bottom -- and meant for spacemacs.

| Function               | Use                              | Keybinding |
|------------------------+----------------------------------+------------|
| =zd-search-at-point=     | Search for thing at point        | =SPC d s=    |
| =zd-search-current-id=   | Search for id of current file    | =SPC d c=    |
| =zd-avy-file-search=     | Select =§= id and open linked file | =SPC d f=    |
| =zd-avy-link-search=     | Select =§= id and search for it    | =SPC d l=    |
| =zd-avy-tag-search=      | Select =#= tag and search for it   | =SPC d t=    |
| =zd-new-file=            | Create new note and open         | =SPC d n=    |
| =zd-new-file-and-link=   | Create new note and insert =§= id  | =SPC d N=    |
| =zd-find-file-id-insert= | Pick a note and insert its =§= id  | =SPC d i=    |

More details documented below.

** How to use this source

This set of commands requires:
 - =deft=, obviously
 - =avy= comes in handy to jump & search (see the final set of functions)

From the github repository, either
 - download the =org-file= and =org-tangle= it yourself. It should contain everything.
 - or download the =zetteldeft.el= file.

Whichever way you go, load the =.el= file in emacs with

#+BEGIN_SRC emacs-lisp :tangle no
(load "/path/to/zetteldeft.el")
#+END_SRC

and you're good to go!

* =deft= setup

The following assumes =deft= is loaded manually in your dotfile, it merely configures the package.

** Set =deft-directory=

Search the deft directory recursively, to include subdirectories.

#+BEGIN_SRC emacs-lisp
(setq deft-directory (concat org-directory "/notes/zetteldeft"))
(setq deft-recursive t)
#+END_SRC

** Notes & extensions

Note extensions are =md=, =txt= and =org=.
First of this list is the default for new notes.

#+BEGIN_SRC emacs-lisp
(setq deft-extensions '("org" "md" "txt"))
#+END_SRC

** Ignore more =org-mode= metadata

I tend to write =org-mode= titles with =#+title:= (i.e., uncapitalized). Also other =org-mode= code at the beginning is written in lower case.

In order to filter these from the deft summary, let's alter the regular expression:

#+BEGIN_SRC emacs-lisp
(setq deft-strip-summary-regexp
 (concat "\\("
         "[\n\t]" ;; blank
         "\\|^#\\+[a-zA-Z_]+:.*$" ;;org-mode metadata
         "\\)"))
#+END_SRC

Its original value was =\\([\n ]\\|^#\\+[[:upper:]_]+:.*$\\)=.


* =zetteldeft= functions
** Search functions
*** =zd-get-thing-at-point= returns string

Returns the thing at point as string.

Tries to get, in the following order:
 - links between =[[=
 - hashtags: =§=, =#= or =@=
 - words

Based on snippet suggested by =saf-dmitry= on deft's [[https://github.com/jrblevin/deft/issues/52#issuecomment-401766828][Github]].

#+BEGIN_SRC emacs-lisp
(defun zd-get-thing-at-point ()
"Return the thing at point, which can be a link, tag or word."
  (require 'thingatpt)
  (let* ((link-re "\\[\\[\\([^]]+\\)\\]\\]")
         (htag-re "\\([§#@][[:alnum:]_-]+\\)"))
   (cond
    ((thing-at-point-looking-at link-re)
      (match-string-no-properties 1))
     ((thing-at-point-looking-at htag-re)
      (match-string-no-properties 1))
     (t (thing-at-point 'word t)))
  ))
#+END_SRC

*** =zd-search-at-point= thing at point

Search the thing at point.
Note that calling =zd-search-at-point= on a =§= link includes =§= in the filter string.


Based on snippet suggested by =saf-dmitry= on deft's [[https://github.com/jrblevin/deft/issues/52#issuecomment-401766828][Github]].

#+BEGIN_SRC emacs-lisp
(defun zd-search-at-point ()
"Search deft with thing-at-point as filter.
Thing can be a double-bracketed link, a hashtag, or a word."
  (interactive)
  (let ((string (zd-get-thing-at-point)))
   (if string
       (zd-search-global string t)
     (user-error "No search term at point")))
  )
#+END_SRC

*** =zd-search-global= for string

Search with deft for given string.
If there is only one result, that file is opened, unless additional argument is true.

Based on snippet suggested by =saf-dmitry= on deft's [[https://github.com/jrblevin/deft/issues/52#issuecomment-401766828][Github]].

#+BEGIN_SRC emacs-lisp
(defun zd-search-global (str &optional dntOpn)
"Search deft with STR as filter.
If there is only one result, open that file (unless DNTOPN is true)."
  ;; Sanitize the filter string
  (setq str (replace-regexp-in-string "[[:space:]\n]+" " " str))
  ;; Call deft search on the filter string
  (let ((deft-incremental-search t))
   (deft)
   (deft-filter str t))
  ;; If there is a single match, open the file
  (unless dntOpn
   (when (eq (length deft-current-files) 1)
     (deft-open-file (car deft-current-files)))))
#+END_SRC

*** =zd-search-filename= for string

Deft search on filename.
If there is only one result, open that file.

Incremental search is turned off, and the filter is set to filenames only.

#+BEGIN_SRC emacs-lisp
(defun zd-search-filename (str)
"Search for deft files with string STR in filename.
Open if there is only one result."
  ;; Sanitize the filter string
  (setq str (replace-regexp-in-string "[[:space:]\n]+" " " str))
  ;; Call deft search on the filter string
  (let ((deft-filter-only-filenames t))
   (deft)
   (deft-filter str t))
  ;; If there is a single match, open the file
  (when (eq (length deft-current-files) 1)
    (deft-open-file (car deft-current-files))))
#+END_SRC

*** =zd-search-current-id= searches current id

Deft search on the id of the current file.

Result is not opened automaticaly.

This function is useful to easily see which notes link to the current file.

#+BEGIN_SRC emacs-lisp
(defun zd-search-current-id ()
"Search deft with the id of the current file as filter.
Open if there is only one result."
 (interactive)
 (zd-search-global (zd-id-current-file) t)
)
#+END_SRC

** IDs
*** Basics for IDs

String format when generating ids.

#+BEGIN_SRC emacs-lisp
(defcustom zd-id-format "%Y-%m-%d-%H%M"
  "Format used when generating zetteldeft IDs."
  :type 'string
  :group 'zetteldeft
)
#+END_SRC

While we're at it, lets tell deft to create new files with this new format.
For good measure: I'd advise creating new notes in the =zetteldeft= system with =zd-new-file= or =zd-new-file-and-link=. See below.

#+BEGIN_SRC emacs-lisp
(setq deft-new-file-format zd-id-format)
#+END_SRC

Here is a function to generate an id string in said format.

#+BEGIN_SRC emacs-lisp
(defun zd-generate-id ()
 "Generates an id in `zd-id-format'."
 (format-time-string zd-id-format)
)
#+END_SRC

*** =zd-id-insert= inserts id

A helper function to insert a generated id.

#+BEGIN_SRC emacs-lisp
(defun zd-id-insert ()
 (interactive)
 "Inserts an id in `zd-id-format'."
 (insert (zd-generate-id) " ")
)
#+END_SRC

*** FIX =zd-id-sanitized= cleans ids

Returns the string stripped from everything that is not a number or a =-=.

#+BEGIN_SRC emacs-lisp
(defun zd-id-sanitized (str)
"Strip STRING from everything that is not a number or a dash."
 (replace-regexp-in-string "[^(0-9)-]+" "" str)
)
#+END_SRC

Potential shortcomming: any numbers /after/ the id are not stripped.
Problematic when stripping the id from a filename, for example.

The following regular expression should work better: =[0-9-]\\{2,\\}-[0-9-]+= (but cannot be used with =replace-regexp-in-string= function). Something to fix.

*** FIX =zd-file-id-stripped= strips file id from string

Attempts to strip the file id from a string.

This requires a *fix*, or better yet, a reimplementation. Too crude at the moment.

First, take only 17 first characters from the input string.
Next, omit anything that is not a digit or a dash.

#+BEGIN_SRC emacs-lisp
(defun zd-file-id-stripped (file)
"Returns file id stripped from given filename FILE."
 (let ((file (substring file 0 16)))
   (zd-id-sanitized file)
))
#+END_SRC


*** =zd-id-current-file= returns id in filename

Return the id from the filename the buffer is currently visiting.

Requires *fix*: filenames with numbers in it are not fully stripped.

Steps:
 1. Get the filename from the buffer
 2. Strip the ID from it.
 3. Result can be empty string when no id is detected in the filename.

#+BEGIN_SRC emacs-lisp
(defun zd-id-current-file ()
"Return the id from the filename the buffer is currently visiting."
 (zd-file-id-stripped (file-name-base (buffer-file-name)))
)
#+END_SRC

*** =zd-copy-id-current-file= copies id in filename

Add the ID from the current file to the kill ring.

#+BEGIN_SRC emacs-lisp
(defun zd-copy-id-current-file ()
"Add the id from the filename the buffer is currently visiting to the kill ring."
(interactive)
 (kill-new (zd-id-current-file))
)
#+END_SRC

** Finding & linking files from minibuffer
*** =zd-find-file= opens file from minibuffer

Select file from the deft folder from the minibuffer.

Based on =deft-find-file=.

#+BEGIN_SRC emacs-lisp
(defun zd-find-file (file)
"Open deft file FILE."
 (interactive
  (list (completing-read "Deft find file: "
        (deft-find-all-files-no-prefix))))
 (deft-find-file file)
)
#+END_SRC

*** =zd-find-file-id-copy= copies file id

Select file from minibuffer and add its link id to kill ring.

Based on =deft-find-file=.

#+BEGIN_SRC emacs-lisp
(defun zd-find-file-id-copy (file)
"Find deft file FILE and add its id to the kill ring."
 (interactive (list
        (completing-read "File to copy id from: "
        (deft-find-all-files-no-prefix))))
  (kill-new (concat "§" (zd-file-id-stripped file)))
)
#+END_SRC

*** =zd-find-file-id-insert= inserts file id

Select file from minibuffer and insert its link, prepended by =§=.

Based on =deft-find-file=.

#+BEGIN_SRC emacs-lisp
(defun zd-find-file-id-insert (file)
"Find deft file FILE and insert its link id, prepended by §."
 (interactive (list
        (completing-read "File to insert id from: "
        (deft-find-all-files-no-prefix))))
  (insert (concat "§" (zd-file-id-stripped file)))
)
#+END_SRC

*** =zd-find-file-full-title-insert= inserts full file title

Select file from minibuffer and insert its link, prepended by =§=.

Based on =deft-find-file=.

#+BEGIN_SRC emacs-lisp
(defun zd-find-file-full-title-insert (file)
"Find deft file FILE and insert its link id with title, prepended by §."
 (interactive (list
        (completing-read "File to insert full title from: "
        (deft-find-all-files-no-prefix))))
  (insert (concat "§" (file-name-base file)))
)
#+END_SRC

** New file creation
*** =zd-new-file= creates new file

Create new file with filename as =zd-id-format= and a string.

Either provide a name as argument, or enter one in the mini-buffer.
A title is automatically added to the file, unless an additioanl parameter is given.
When =evil= is used, enter the insert state as well.
The full name is added to the kill ring.
Note that the file is only actually created upon save.

#+BEGIN_SRC emacs-lisp
(defun zd-new-file (str &optional empty)
"Create a new deft file. Filename is `zd-id-format' appended by STR. No extension needed.

After creating, the title is inserted in org-mode format (unless EMPTY is true) and the full file name is added to the kill ring."
 (interactive (list (read-string "name: ")))
 (let* ((zdId (zd-generate-id))
        (zdName (concat zdId " " str)))
 (deft-new-file-named zdName)
 (kill-new zdName)
 (unless empty (zd-insert-org-title))
 (when (featurep 'evil) (evil-insert-state))
))
#+END_SRC

*** =zd-new-file-and-link= inserts generated id

Generate an id, append a name, and generate a new file based on id and link.

Either provide a name as argument, or enter one in the mini-buffer.

#+BEGIN_SRC emacs-lisp
(defun zd-new-file-and-link (str)
"Inserts generated id with `zd-id-format' appended with STR.
Creates new deft file with id and STR as name."
 (interactive (list (read-string "name: ")))
 (insert "§" (zd-generate-id) " " str)
 (zd-new-file str)
)
#+END_SRC

** Functions with =avy=
*** =zd-avy-tag-search=

Use avy to jump to a tag and search for it.

The search term should include the =#= as tag identifier, so it's as easy as jumping to the =#= and running =zd-search-at-point=.

#+BEGIN_SRC emacs-lisp
(defun zd-avy-tag-search ()
"Call on avy to jump and search tags indicated with #."
 (interactive)
 (save-excursion
  (avy-goto-char ?#)
  (zd-search-at-point)
))
#+END_SRC

*** =zd-avy-link-search=

Use avy to jump to an id and search for it.

Jumps to the =§= identifier and searches for the thing at point -- excluding the =§= character.

#+BEGIN_SRC emacs-lisp
(defun zd-avy-link-search ()
"Call on avy to jump and search link ids indicated with §.
Opens immediately if there is only one result."
 (interactive)
 (save-excursion
  (avy-goto-char ?§)
  (zd-search-global (zd-id-sanitized (zd-get-thing-at-point)))
))
#+END_SRC

*** =zd-avy-file-search=

Use avy to jump to an id and find the corresponding file.
There should be only one result, as the id should be unique.

Jump to a =§= with =avy=, get the thing at point.
If it is non-nil, search it after sanitizing.

#+BEGIN_SRC emacs-lisp
(defun zd-avy-file-search ()
"Call on avy to jump to link ids indicated with § and use it to search for filenames."
 (interactive)
 (save-excursion
  (avy-goto-char ?§)
  (zd-search-filename (zd-id-sanitized (zd-get-thing-at-point)))
))
#+END_SRC

** Utility functions
*** Deft new search

The following function launches deft, clears the filter and enters =evil-insert-state= (when evil is used).

#+BEGIN_SRC emacs-lisp
(defun zd-deft-new-search ()
"Launch deft, clear filter and enter insert state."
 (interactive)
 (deft)
 (deft-filter-clear)
 (when (featurep 'evil) (evil-insert-state))
)
#+END_SRC

*** =zd-file-rename= renames visited file

Rename the current file.
Based on the function =deft-rename-file= with only minor changes in the way =old-filename= is set: from current buffer rather than from =deft= search buffer.

Probably requires some more testing.
Anyway, best to use this only when visiting a file in the deft directory.

The function also updates the =#+title:= at the top of the buffer, if any is present.

#+BEGIN_SRC emacs-lisp
(defun zd-file-rename ()
"Rename the current file via the deft function. Use this on files in the deft-directory."
 (interactive)
  (let ((old-filename (buffer-file-name))
        (deft-dir (file-name-as-directory deft-directory))
        new-filename old-name new-name)
    (when old-filename
      (setq old-name (deft-base-filename old-filename))
      (setq new-name (read-string
                      (concat "Rename " old-name " to (without extension): ")
                      old-name))
      (setq new-filename
            (concat deft-dir new-name "." deft-default-extension))
      (rename-file old-filename new-filename)
      (deft-update-visiting-buffers old-filename new-filename)
      (zd-update-title-in-file)
      (deft-refresh))))
#+END_SRC

To update the title of the currently visited file, the following function is used.

#+BEGIN_SRC emacs-lisp
(defun zd-update-title-in-file ()
"Update the #+TITLE in the current file, if present."
  (save-excursion
    (let ((zd-string-after-title ""))
      (goto-char (point-min))
      (when (search-forward "#+title:" nil t)
        (delete-region (line-beginning-position) (line-end-position))
        (zd-insert-org-title)))))
#+END_SRC

*** =zd-insert-org-title= inserts file title in org-mode

Easily insert the title of the current file in =org-mode= syntax, i.e. as a =#+title:= line.

The code gets the base of the buffer file name, takes from it the file title (i.e. strips the link id at the beginning), and inserts the remaining string.

Below the title, an additional template string is inserted automatically.
This string, variable =zd-string-after-title=, can be customized and is empty by default.

#+BEGIN_SRC emacs-lisp
(defun zd-insert-org-title ()
 (interactive)
 (insert
   "#+title: "
   (zd-lift-file-title (file-name-base (buffer-file-name)))
   zd-string-after-title))
#+END_SRC

Customize the string to be inserted below the title.

#+BEGIN_SRC emacs-lisp
(defcustom zd-string-after-title ""
  "String inserted below title when `zd-insert-org-title' is called.
Empty by default.
Don't forget to add `\\n' at the beginning to start a new line."
  :type 'string
  :group 'zetteldeft)
#+END_SRC

*** =zd-count-words= counts total number of words

To count the total number of words, lets loop over all the files and count words in each.
The total is printed in the minibuffer.

#+BEGIN_SRC emacs-lisp
(defun zd-count-words ()
  "Prints total number of words in all deft files in the minibuffer."
  (interactive)
  (let ((numWords 0))
    (dolist (deftFile deft-all-files)
      (with-temp-buffer
        (insert-file-contents deftFile)
        (setq numWords (+ numWords (count-words (point-min) (point-max))))))
    (message "Total words accross all notes: %s" numWords)))
#+END_SRC

* Gathering notes
** Idea

Sometimes you want to easily gather all notes with a certain tag or search term.
Say you want to quickly generate a list of links to all files including the tag =#zetteldeft=.

The following functions automate that process:
 - =zd-insert-list-links= promts for a search string and inserts a list of notes
 - =zd-org-include-search= generates =#+INCLUDE= code for =org-mode= for these files.

** Helper functions
*** =zd-get-file-list= returns file list on search

Get a list of the files with given search string.

To *fix*: sorting of results.

The code searches for the given string and returns =deft-current-files=.

#+BEGIN_SRC emacs-lisp
(defun zd-get-file-list (srch)
"Returns a list of files with the search item SRCH."
  (let ((deft-current-sort-method 'title))
   (deft-filter srch t)
   deft-current-files
))
#+END_SRC


*** =zd-lift-file-title= returns file title from path

Returns only the file title from a file, removing path, extension, and link ID.

#+BEGIN_SRC emacs-lisp
(defun zd-lift-file-title (zdFile)
  "Returns the title of a zetteldeft note.
ZDFILE should be a full path to a note."
 (let ((baseName (file-name-base zdFile)))
   (replace-regexp-in-string
    "[0-9]\\{2,\\}-[0-9-]+[[:space:]]"
    "" baseName)
))
#+END_SRC

*** =zd-insert-file-contents= returns the contents of a file

Returns the contents of a file.

#+BEGIN_SRC emacs-lisp
(defun zd-file-contents (zdFile &optional removeLines)
  "Inserts file contents of a zetteldeft note.
ZDFILE should be a full path to a note.

Optional: leave out first REMOVELINES"
  (with-temp-buffer
    (insert-file-contents zdFile)
    (when removeLines
      (kill-whole-line removeLines))
    (buffer-string)))
)
#+END_SRC

** List of links
*** =zd-insert-list-links= generates list with tagged files

Creates and inserts a list with links to all files with selected search term.

The code gets a list of files that contain the search string, runs through said list and inserts a link for each entry.

#+BEGIN_SRC emacs-lisp
(defun zd-insert-list-links (zdSrch)
"Inserts at point a list of links to all deft files with a search string ZDSRCH.
When searching for a tag, include # manually in the search."
 (interactive (list (read-string "search string: ")))
 (dolist (zdFile (zd-get-file-list zdSrch))
  (zd-list-entry-file-link zdFile)
))
#+END_SRC

*** =zd-list-entry-file-link= includes a file link as list entry

Inserts for given file a link id and title as a list entry.

#+BEGIN_SRC emacs-lisp
(defun zd-list-entry-file-link (zdFile)
"Insert ZDFILE as list entry."
 (insert " - " (concat "§" (file-name-base zdFile)) "\n")
)
#+END_SRC


** Compiling a single =org=
*** Idea and example
**** Including notes with given tag

For each of the notes with the =#tag=, it inserts a heading, a line with =#+INCLUDE= and the full path to the relevant notes.
This results in a single file that can be easily exported.

The only function meant for use on the users end, is =zd-org-include-search=.

For example,

#+BEGIN_SRC emacs-lisp :tangle no
(zd-org-include-files "#export")
#+END_SRC

inserts necessary code to include all files containing the tag =#export=.
The results could look like the following:

#+BEGIN_SRC org
\* First file title
#+INCLUDE: "/path/to/2018-07-13-2210 First file title.org"

\* File two
#+INCLUDE: "/path/to/2018-07-13-2223 File two.org"
#+END_SRC

All functions are documented below.

**** Semi-automated example

You could, for example, add the following code to a document and execute (or evaluate) it from within =org-mode=.
Add it under a "comment" type heading to prevent it from being exported itself, like so: =* COMMENT Code=.

#+BEGIN_SRC emacs-lisp :tangle no
(let (frst)
  (save-excursion
    ;; Move to next heading
    (outline-next-heading)
    (setq frst (point))
    ;; Delete everything after
    (delete-region frst (point-max))
    ;; Include the files
    (zd-org-include-search "#tag")
    ; Sort these entries alphabetically (set mark to use a region)
;   (goto-char frst) (set-mark (point-max))
;   (org-sort-entries nil ?a)
  ))
#+END_SRC

The code deletes everything after the current header and inserts all notes with =#tag= in them.

In order to also sort the entries alphabetically, uncomment the last two lines.

Don't put the file with the above code in you =deft= folder, or it will attempt to include itself (since it has =#tag= in it).

**** Issues & things to note

Before we look at the functions, a note on limitations of the current implementation.

1. *Over-enthousiastic inclusion*
   Sometimes, a tag appears in a file without the need for it to be included.
   For example, a file with a list of all tags will also include the tag one wants.
   In the future, this might be resolved by filtering, for example with http://ergoemacs.org/emacs/elisp_filter_list.html.

2. *Inclusion from second line onwards*
   Currently, the =#+INCLUDE= lines only include from the second line onwards.
   This is a work-around to prevent =#+TITLE= lines from being included (and messing up the title on =org-export=.
   To change this, edit the inserted strings in the =zd-org-include-file= function.

3. *Sorting*
   The files included are unsorted, or rather: sorted as =deft= provides the results.
   Attempts at sorting by title are included in =zd-get-file-list=, but not working properly.
   As a solution, use =org-sort= manually after running =zd-org-include-search=.

*** =zd-org-include-search= generates =#+INCLUDE= code

Asks user for a search string and inserts headers and =#+INCLUDE= code for all files with said tag.
When used on =#tag=, make sure to include the =#= manually.

#+BEGIN_SRC emacs-lisp
(defun zd-org-include-search (zdSrch)
"Inserts at point org-mode code to include all files with the selected tag. Include the # manually in the prompt."
 (interactive (list (read-string "tag (include the #): ")))
 (dolist (zdFile (zd-get-file-list zdSrch))
  (zd-org-include-file zdFile)
))
#+END_SRC

*** =zd-org-include-file= includes a file in =org= format

Inserts the title as a new header, with the =#+INCLUDE= line below.
Includes only from the second line onward, so that any =#+TITLE= lines are omitted.

#+BEGIN_SRC emacs-lisp
(defun zd-org-include-file (zdFile)
"Insert code to include org-file zdFile."
 (insert
   ;; Insert org-mode title
   "\n* " (zd-lift-file-title zdFile) "\n"
   ;; Insert #+INCLUDE: "file.org" :lines 2-
   "#+INCLUDE: \"" zdFile "\" :lines \"2-\"\n"
 ))
#+END_SRC

*** =zd-org-search-insert= generates titles & file content

#+BEGIN_SRC emacs-lisp
(defun zd-org-search-insert (zdSrch)
"Inserts at point all the content of the files with ZDSRCH. When looking for zetteldeft tags, include the # manually in the search."
 (interactive (list (read-string "Search term: ")))
 (dolist (zdFile (zd-get-file-list zdSrch))
   (zd-org-insert-file zdFile)
))
#+END_SRC

*** =zd-org-insert-file= yanks a files content

For a file, insert its title and contents (without first 3 lines).

Even better would be: without any of the lines starting with =#= at the beginning of the file.

#+BEGIN_SRC emacs-lisp
(defun zd-org-insert-file (zdFile)
"Insert title and contents of ZDFILE."
  (insert
    ;; Insert org-mode title
    "\n* " (zd-lift-file-title zdFile) "\n\n"
    ;; Insert file contents (without the first 3 lines)
    (zd-file-contents zdFile 3))
 ))
#+END_SRC

* Aesthetics
** Highlighting zetteldeft links

To highlight zetteldeft links, let's add a =font-lock= keyword to =org-mode=.

Currently, the regexp to find links is hardcoded.

Highlighting not working in comments.

#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode '(
  ("§[0-9]\\{2,\\}-[0-9-]+" . font-lock-warning-face)
  ))
#+END_SRC

* Keybindings

Note: This setup is for =spacemacs=.

** Additional =deft= keybindings

Deft specific keybindings behind the =,= prefix.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'deft
  (define-key spacemacs-deft-mode-map-prefix
    "o" 'efls/deft-open)
  (define-key spacemacs-deft-mode-map-prefix
    [?\t] 'efls/deft-open-preview)
 )
#+END_SRC


A small function to open a file in the other window and shifting focus to it.
That final part is what the =t= argument does.

#+BEGIN_SRC emacs-lisp
(defun efls/deft-open-other ()
 (interactive)
 (deft-open-file-other-window t)
)
#+END_SRC

Let's add another function, to simply preview in the other window, i.e. not switch focus to it.

#+BEGIN_SRC emacs-lisp
(defun efls/deft-open-preview ()
 (interactive)
 (deft-open-file-other-window)
)
#+END_SRC


To select results from the item list without leaving the =insert= state, I add the following keys.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'deft
  (define-key deft-mode-map
    (kbd "<tab>") 'efls/deft-open-preview)
  (define-key deft-mode-map
    (kbd "<s-return>") 'efls/deft-open-other)
  (define-key deft-mode-map
    (kbd "s-j") 'evil-next-line)
  (define-key deft-mode-map
    (kbd "s-k") 'evil-previous-line)
)
#+END_SRC


** Some =zetteldeft= specifics

Can be called from any mode.

#+BEGIN_SRC emacs-lisp
;; Prefix
(spacemacs/declare-prefix "d" "deft")
;; Launch deft
(spacemacs/set-leader-keys "dd" 'deft)
(spacemacs/set-leader-keys "dD" 'zd-deft-new-search)
;; SEARCH
 ; Search thing at point
   (spacemacs/set-leader-keys "ds" 'zd-search-at-point)
 ; Search current file id
   (spacemacs/set-leader-keys "dc" 'zd-search-current-id)
 ; Jump & search with avy 
 ;  search link as filename
    (spacemacs/set-leader-keys "df" 'zd-avy-file-search)
 ;  search link as contents
    (spacemacs/set-leader-keys "dl" 'zd-avy-link-search)
 ;  search tag as contents
    (spacemacs/set-leader-keys "dt" 'zd-avy-tag-search)
;; LINKS
 ; Insert link from filename
   (spacemacs/set-leader-keys "di" 'zd-find-file-id-insert)
 ; Insert link with full filename
   (spacemacs/set-leader-keys "dI" 'zd-find-file-full-title-insert)
;; FILES
 ; Open file
   (spacemacs/set-leader-keys "do" 'zd-find-file)
 ; Create new file
   (spacemacs/set-leader-keys "dn" 'zd-new-file)
   (spacemacs/set-leader-keys "dN" 'zd-new-file-and-link)
 ; Rename file
   (spacemacs/set-leader-keys "dr" 'zd-file-rename)
;; UTILITIES
(spacemacs/set-leader-keys "dR" 'deft-refresh)
#+END_SRC


* Brainstorm

Some ideas for the future.

** Saved searches

Create a list of saved searches, somewhere easily accessible.

** Generate list of tags

Auto-generate a list of tags.

Might exceed my elisp-fu.

** HTML export

Export HTML pages with clickeable links between notes.

** Markdown export

Export markdown through =pandoc=.

** Templates

A system for note templates.

** Minor mode

Create a minor mode on top of org-mode with some niceties:
 - higlight links & tags
 - clickeable links
